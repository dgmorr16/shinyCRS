filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, -levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
gsub('Values and priority measures','Outcomes', dv$levelName)
View(dv)
dv <- gsub('Values and priority measures','Outcomes', dv$levelName)
gsub('Values and priority measures','Outcomes', dv$levelName)
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, -levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
gsub('Values and priority measures','Outcomes', dv$levelName)
View(dv)
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
View(dv)
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$area <- gsub('allSlums', 'All Slum Areas', dv$area)
dv$area <- gsub('Ashraf', 'Ashraf Colony', dv$area)
dv$area <- gsub('Golden', 'Golden Colony', dv$area)
dv$area <- gsub('Shanti', 'Shanti Colony', dv$area)
dv$area <- gsub('New', 'New Indra Vihar', dv$area)
dv$area <- gsub('Peer', 'Peer Daulat shah', dv$area)
dv %>% saveRDS(filenameTimestamp(
prefix = "Jaipur_plottingData", extension = ".RDS")) ## Specify filename
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
View(usahJaipurData)
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
rm(list = ls()); cat("\014")
# devtools::install_github("avisserquinn/colR") # For colR functions
pacman::p_load(tidyverse, pbapply, data.table, igraph, vegalite, colR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Functions ---------------------------------------------------------------
# Function to attach a date and time to outputs
filenameTimestamp <- function(prefix, extension, sep = "_") {
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
paste0(prefix, sep, timestamp, extension)
}
# Function for generating POT plot:
myDotplot <- function(myData, myPlotTitle) {
ggplot(data = myData, aes(x = result,
y = fct_reorder(vName, baseline_result_bc, .desc = F),
fill = result)) +
#facet_col(facets = vars(indicators), scales = "free_y", space = "free") +
geom_vline(xintercept = 0, linetype="dashed",
color = "#B4BDC5", size=0.5) +
geom_point(stat='identity', size = 9, shape = 21, stroke = 0) +
geom_text(aes(x = result, label = ifelse(result > 0, paste0("+", round(result,0)), round(result,0)), colour = "red" ),
fontface = "bold", family = "Arial",
size = 4) +
labs(title = myPlotTitle) +
theme(text = element_text(colour = "#2E4053"),
plot.title = element_text(face = "bold", size = 14, colour = "#2E4053"),
axis.text.y = element_text(colour = "#2B3947", size = 11),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y.left = element_text(colour = "#2B3947"),
strip.text = element_text(face = "bold", size = 12, colour = "#2B3947"),
strip.background = element_blank(),
panel.background = element_rect(fill = "white", colour = "transparent", size = 2),
#panel.grid.major.x = element_line(colour = "#B4BDC5", size = 2),
panel.grid.major.y = element_line(colour = "#1B2631", linetype = 2, size = 0.5),
panel.spacing = unit(0.25, "cm"),
legend.position = "none")
}
# Load data ---------------------------------------------------------------
dt <- readRDS("USAH_resultsCompared_Jaipur_allScenarios_20210208 (WVBC only).RDS")
## Create key for resultType plotting names...
metric_key <- data.frame(
resultLabel = c("Absolute", "Absolute change", "Percent change",
"Node Rank (overall)", "Node Rank (by level)"),
resultType = c("scenario_result_bc", "scenario_result_bcChange", "scenario_result_pctChange",
"scenario_result_rankOverall", "scenario_result_rankByLevel")
)
# Prepare data for Shiny --------------------------------------------------
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$area <- gsub('allSlums', 'All Slum Areas', dv$area)
dv$area <- gsub('Ashraf', 'Ashraf Colony', dv$area)
dv$area <- gsub('Golden', 'Golden Colony', dv$area)
dv$area <- gsub('Shanti', 'Shanti Colony', dv$area)
dv$area <- gsub('New', 'New Indra Vihar', dv$area)
dv$area <- gsub('Peer', 'Peer Daulat shah', dv$area)
dv %>% saveRDS(filenameTimestamp(
prefix = "Jaipur_plottingData", extension = ".RDS")) ## Specify filename
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
View(usahJaipurData)
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
View(usahJaipurData)
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
View(usahJaipurData)
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
View(key)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
bsExample("Tooltips_and_Popovers")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(usahJaipurData)
rm(list = ls()); cat("\014")
# devtools::install_github("avisserquinn/colR") # For colR functions
pacman::p_load(tidyverse, pbapply, data.table, igraph, vegalite, colR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Function to attach a date and time to outputs
filenameTimestamp <- function(prefix, extension, sep = "_") {
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
paste0(prefix, sep, timestamp, extension)
}
# Function for generating POT plot:
myDotplot <- function(myData, myPlotTitle) {
ggplot(data = myData, aes(x = result,
y = fct_reorder(vName, baseline_result_bc, .desc = F),
fill = result)) +
#facet_col(facets = vars(indicators), scales = "free_y", space = "free") +
geom_vline(xintercept = 0, linetype="dashed",
color = "#B4BDC5", size=0.5) +
geom_point(stat='identity', size = 9, shape = 21, stroke = 0) +
geom_text(aes(x = result, label = ifelse(result > 0, paste0("+", round(result,0)), round(result,0)), colour = "red" ),
fontface = "bold", family = "Arial",
size = 4) +
labs(title = myPlotTitle) +
theme(text = element_text(colour = "#2E4053"),
plot.title = element_text(face = "bold", size = 14, colour = "#2E4053"),
axis.text.y = element_text(colour = "#2B3947", size = 11),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y.left = element_text(colour = "#2B3947"),
strip.text = element_text(face = "bold", size = 12, colour = "#2B3947"),
strip.background = element_blank(),
panel.background = element_rect(fill = "white", colour = "transparent", size = 2),
#panel.grid.major.x = element_line(colour = "#B4BDC5", size = 2),
panel.grid.major.y = element_line(colour = "#1B2631", linetype = 2, size = 0.5),
panel.spacing = unit(0.25, "cm"),
legend.position = "none")
}
# Load data ---------------------------------------------------------------
dt <- readRDS("USAH_resultsCompared_Jaipur_allScenarios_20210208 (WVBC only).RDS")
## Create key for resultType plotting names...
metric_key <- data.frame(
resultLabel = c("Absolute", "Absolute change", "Percent change",
"Node Rank (overall)", "Node Rank (by level)"),
resultType = c("scenario_result_bc", "scenario_result_bcChange", "scenario_result_pctChange",
"scenario_result_rankOverall", "scenario_result_rankByLevel")
)
# Prepare data for Shiny --------------------------------------------------
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$area <- gsub('allSlums', 'All Slum Areas', dv$area)
dv$area <- gsub('Ashraf', 'Ashraf Colony', dv$area)
dv$area <- gsub('Golden', 'Golden Colony', dv$area)
dv$area <- gsub('Shanti', 'Shanti Colony', dv$area)
dv$area <- gsub('New', 'New Indra Vihar', dv$area)
dv$area <- gsub('Peer', 'Peer Daulat Shah', dv$area)
dv %>% saveRDS(filenameTimestamp(
prefix = "Jaipur_plottingData", extension = ".RDS")) ## Specify filename
rm(list = ls()); cat("\014")
# devtools::install_github("avisserquinn/colR") # For colR functions
pacman::p_load(tidyverse, pbapply, data.table, igraph, vegalite, colR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Function to attach a date and time to outputs
filenameTimestamp <- function(prefix, extension, sep = "_") {
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
paste0(prefix, sep, timestamp, extension)
}
# Function for generating POT plot:
myDotplot <- function(myData, myPlotTitle) {
ggplot(data = myData, aes(x = result,
y = fct_reorder(vName, baseline_result_bc, .desc = F),
fill = result)) +
#facet_col(facets = vars(indicators), scales = "free_y", space = "free") +
geom_vline(xintercept = 0, linetype="dashed",
color = "#B4BDC5", size=0.5) +
geom_point(stat='identity', size = 9, shape = 21, stroke = 0) +
geom_text(aes(x = result, label = ifelse(result > 0, paste0("+", round(result,0)), round(result,0)), colour = "red" ),
fontface = "bold", family = "Arial",
size = 4) +
labs(title = myPlotTitle) +
theme(text = element_text(colour = "#2E4053"),
plot.title = element_text(face = "bold", size = 14, colour = "#2E4053"),
axis.text.y = element_text(colour = "#2B3947", size = 11),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y.left = element_text(colour = "#2B3947"),
strip.text = element_text(face = "bold", size = 12, colour = "#2B3947"),
strip.background = element_blank(),
panel.background = element_rect(fill = "white", colour = "transparent", size = 2),
#panel.grid.major.x = element_line(colour = "#B4BDC5", size = 2),
panel.grid.major.y = element_line(colour = "#1B2631", linetype = 2, size = 0.5),
panel.spacing = unit(0.25, "cm"),
legend.position = "none")
}
# Load data ---------------------------------------------------------------
dt <- readRDS("USAH_resultsCompared_Jaipur_allScenarios_20210208 (WVBC only).RDS")
## Create key for resultType plotting names...
metric_key <- data.frame(
resultLabel = c("Absolute", "Absolute change", "Percent change",
"Node Rank (overall)", "Node Rank (by level)"),
resultType = c("scenario_result_bc", "scenario_result_bcChange", "scenario_result_pctChange",
"scenario_result_rankOverall", "scenario_result_rankByLevel")
)
# Prepare data for Shiny --------------------------------------------------
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$area <- gsub('allSlums', 'All Slum Areas', dv$area)
dv$area <- gsub('Ashraf', 'Ashraf Colony', dv$area)
dv$area <- gsub('Golden', 'Golden Colony', dv$area)
dv$area <- gsub('Shanti', 'Shanti Colony', dv$area)
dv$area <- gsub('New', 'New Indra Vihar', dv$area)
dv$area <- gsub('Peer', 'Peer Daulat Shah', dv$area)
# Test plot -------
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
) %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
rm(list = ls()); cat("\014")
# devtools::install_github("avisserquinn/colR") # For colR functions
pacman::p_load(tidyverse, pbapply, data.table, igraph, vegalite, colR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Function to attach a date and time to outputs
filenameTimestamp <- function(prefix, extension, sep = "_") {
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
paste0(prefix, sep, timestamp, extension)
}
shiny::runApp()
View(usahJaipurData)
rm(list = ls()); cat("\014")
# devtools::install_github("avisserquinn/colR") # For colR functions
pacman::p_load(tidyverse, pbapply, data.table, igraph, vegalite, colR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Functions ---------------------------------------------------------------
# Function to attach a date and time to outputs
filenameTimestamp <- function(prefix, extension, sep = "_") {
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
paste0(prefix, sep, timestamp, extension)
}
# Function for generating POT plot:
myDotplot <- function(myData, myPlotTitle) {
ggplot(data = myData, aes(x = result,
y = fct_reorder(vName, baseline_result_bc, .desc = F),
fill = result)) +
#facet_col(facets = vars(indicators), scales = "free_y", space = "free") +
geom_vline(xintercept = 0, linetype="dashed",
color = "#B4BDC5", size=0.5) +
geom_point(stat='identity', size = 9, shape = 21, stroke = 0) +
geom_text(aes(x = result, label = ifelse(result > 0, paste0("+", round(result,0)), round(result,0)), colour = "red" ),
fontface = "bold", family = "Arial",
size = 4) +
labs(title = myPlotTitle) +
theme(text = element_text(colour = "#2E4053"),
plot.title = element_text(face = "bold", size = 14, colour = "#2E4053"),
axis.text.y = element_text(colour = "#2B3947", size = 11),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y.left = element_text(colour = "#2B3947"),
strip.text = element_text(face = "bold", size = 12, colour = "#2B3947"),
strip.background = element_blank(),
panel.background = element_rect(fill = "white", colour = "transparent", size = 2),
#panel.grid.major.x = element_line(colour = "#B4BDC5", size = 2),
panel.grid.major.y = element_line(colour = "#1B2631", linetype = 2, size = 0.5),
panel.spacing = unit(0.25, "cm"),
legend.position = "none")
}
# Load data ---------------------------------------------------------------
dt <- readRDS("USAH_resultsCompared_Jaipur_allScenarios_20210208 (WVBC only).RDS")
## Create key for resultType plotting names...
metric_key <- data.frame(
resultLabel = c("Absolute", "Absolute change", "Percent change",
"Node Rank (overall)", "Node Rank (by level)"),
resultType = c("scenario_result_bc", "scenario_result_bcChange", "scenario_result_pctChange",
"scenario_result_rankOverall", "scenario_result_rankByLevel")
)
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
)
View(dv)
dt <- readRDS("USAH_resultsCompared_Jaipur_allScenarios_20210208 (WVBC only).RDS")
View(dt)
dv <-
dt %>%
filter(
levelName == c("Values and priority measures", "Generalised functions"),
resultType == "scenario_result_pctChange"
)
View(dv)
dv <-
dt %>%
arrange(scenario, level, vName) %>%
full_join(metric_key, by = "resultType") %>%
mutate(levelName = levelName,
levelF = factor(level, ordered = TRUE),
#indicators = str_to_upper(indicators),
label = paste0(level, " - ", levelName),
label = fct_inorder(label),
hazard = str_to_title(gsub(".*?USAH_Jaipur_\\w+_(.*?)_2021.*", "\\1", scenario)),
area = gsub(".*?USAH_Jaipur_(.*?)_.*", "\\1", scenario)
) %>%
rename(Result = result, Node = vName) %>%
select(-level, levelF, levelName, -outlierLabel, Node, baseline_result_bc, resultType,
resultLabel, -scenario, -label, hazard, area)
dv
View(dt)
dv$levelName <- gsub('Values and priority measures','Outcomes', dv$levelName)
dv$levelName <- gsub('Generalised functions','Tasks', dv$levelName)
dv$hazard <- gsub('Flood', 'Flooding', dv$hazard)
dv$hazard <- gsub('Heatstress', 'Heat stress', dv$hazard)
dv$hazard <- gsub('Waterscarcity', 'Water scarcity', dv$hazard)
dv$hazard <- gsub('waterquality', 'Water quality', dv$hazard)
dv$area <- gsub('allSlums', 'All Slum Areas', dv$area)
dv$area <- gsub('Ashraf', 'Ashraf Colony', dv$area)
dv$area <- gsub('Golden', 'Golden Colony', dv$area)
dv$area <- gsub('Shanti', 'Shanti Colony', dv$area)
dv$area <- gsub('New', 'New Indra Vihar', dv$area)
dv$area <- gsub('Peer', 'Peer Daulat Shah', dv$area)
dv %>% saveRDS(filenameTimestamp(
prefix = "Jaipur_plottingData", extension = ".RDS")) ## Specify filename
runApp('C:/Users/dmorr/Dropbox (Heriot-Watt University Team)/RES_EGIS_Water_Resilient_Cities/RAEng - Climate-Resilient Slums/RAEng dashboard/shinyApp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
